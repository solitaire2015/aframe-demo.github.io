<!doctype html>
<html>
<head>
    <title>新项目</title>
    <meta content="" name="keywords">
    <meta content="" name="description">

    <meta charset="utf-8" />
    <meta http-equiv="X-UA-compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=1">
    <meta content="yes" name="apple-mobile-web-app-capable" />
    <meta content="black-translucent" name="apple-mobile-web-app-status-bar-style" />
    <meta content="telephone=no" name="format-detection" />
    <meta content="email=no" name="format-detection" />

    <link href="favicon.ico" mce_href="/favicon.ico" rel="bookmark" type="image/x-icon" />
    <link href="favicon.ico" mce_href="/favicon.ico" rel="icon" type="image/x-icon" />
    <link href="favicon.ico" mce_href="/favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <script src="http://cdn.bootcss.com/jquery/2.1.0-beta2/jquery.js"></script>
    <script type="text/javascript" src="three.js"></script>
    <script type="text/javascript" src="OrbitControls.js"></script>
    <script type="text/javascript" src="anime.js"></script>
    <!--[if lt IE 9]><script src="http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js"></script><![endif]-->
    <style type="text/css">
        body {
            position: relative;
            padding: 0;
            margin: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
        }
        .point {
            position: absolute;
            z-index: 8;
            width: 10px;
            height: 10px;
            background: #c00;
        }
    </style>
</head>
<body>
<div class="point1 point"></div>
<div class="point2 point"></div>
<div style="width:0;height:0;overflow:hidden;"><img src="earth_atmos_2048.jpg" /></div>
<script>
    $(function(){

        // 转为平面坐标
        function toScreenPosition(obj, camera)
        {
            var vector = new THREE.Vector3();

            var widthHalf = 0.5*renderer.context.canvas.width;
            var heightHalf = 0.5*renderer.context.canvas.height;

            obj.updateMatrixWorld();
            vector.setFromMatrixPosition(obj.matrixWorld);
            vector.project(camera);

            vector.x = ( vector.x * widthHalf ) + widthHalf;
            vector.y = - ( vector.y * heightHalf ) + heightHalf;

            return {
                x : vector.x,
                y : vector.y
            }
        };
        // 获取地点坐标
        function getPosition(lng, lat, r) {
            var phi = (90-lat)*(Math.PI/180),
                theta = (lng+180)*(Math.PI/180),
                radius = r,
                x = -(radius * Math.sin(phi) * Math.cos(theta)),
                z = (radius * Math.sin(phi) * Math.sin(theta)),
                y = (radius * Math.cos(phi));
            return {x: x, y: y, z: z};
        }

        // 更新marker位置
        var updateMarkerPosition = function(){
            var marker = groupMarker.children;
            for(var m = 0; m <= marker.length-1; m++){
                var address = toScreenPosition(marker[m], camera);
                $('.point').eq(m).css({
                    left : address.x,
                    top : address.y
                });

                var cameraToEarth = global.position.clone().sub(camera.position),
                    L = Math.sqrt(Math.pow(cameraToEarth.length(), 2) - Math.pow(200, 2)),
                    cameraToPin = marker[m].getWorldPosition().clone().sub(camera.position);
                if(cameraToPin.length() > L) {
                    $('.point').eq(m).hide();
                } else {
                    $('.point').eq(m).show();
                }

            }
        };

        // 地球初始角度值
        function getIntersects(){
            var vector = new THREE.Vector3().copy(global.getWorldPosition());
            //vector = vector.unproject(camera);
            var raycaster = new THREE.Raycaster(camera.getWorldPosition(), vector.sub(camera.getWorldPosition()).normalize());
            var intersects = raycaster.intersectObjects([global], true);
            var heading = intersects[0] ? Math.atan2(intersects[0].point.x, intersects[0].point.z) : 0;
            var pitch = intersects[0] ? Math.asin(-intersects[0].point.y / 200) : 0;
            return {
                heading: heading,
                pitch : pitch
            }
        }
        // 获取点击后的坐标的角度值
        function getClickIntersects(index){
            var vector = new THREE.Vector3().copy(groupMarker.children[index].getWorldPosition());
            console.log(vector);
            var heading = Math.atan2(vector.x, vector.z);
            var pitch = Math.asin(-vector.y / 200);
            return {
                heading: heading,
                pitch : pitch
            }
        }
        // 设置点击后 地球旋转角度
        function OnDocumentClick(index)
        {
            var clickIntersects = getClickIntersects(index);
            //calculate new intersected point coordinate
            var initIntersects = getIntersects();
            var initHeading = initIntersects.heading;
            var initPitch = initIntersects.pitch;
            var heading = initHeading - clickIntersects.heading,
                pitch = initPitch - clickIntersects.pitch;

            console.log(heading * 180 / Math.PI, pitch * 180 / Math.PI);

            //when I debug, I find this matrix didn't work, so I change it to matrixWorld
            var group_matrix = new THREE.Matrix4().copy(group.matrix);
            var inverse_group_matrix = new THREE.Matrix4();
            inverse_group_matrix.getInverse(group_matrix);
            //convert world space x and y axises to sphere object space coordinates.
            var x_axis = new THREE.Vector3(1,0,0);
            var y_axis = new THREE.Vector3(0,1,0);
            x_axis.applyMatrix4(inverse_group_matrix);
            y_axis.applyMatrix4(inverse_group_matrix);

            group.rotateOnAxis(y_axis, heading);
            group.rotateOnAxis(x_axis, pitch);

        }


        var placePoint = [
            [151.3545610000, -33.9783340000], // 悉尼
            [117.24899736530006, 31.8694111743] // 合肥
        ];
        var scene, renderer, camera, light, axisHelper;
        scene = new THREE.Scene();
        renderer = new THREE.WebGLRenderer();
        renderer.setClearColor( 0x050505 );
        renderer.setSize(window.innerWidth, window.innerHeight);
        camera = new THREE.PerspectiveCamera(50, window.innerWidth/window.innerHeight, 1, 1000);
        camera.position.set(0, 0, 1000);
        camera.lookAt(scene.position);
        light = new THREE.AmbientLight(0xffffff);
        light.position.set(0, 0, 650);
        scene.add(light);
        scene.add(camera);
        axisHelper = new THREE.AxisHelper( 2000 );
        scene.add( axisHelper );
        var group = new THREE.Object3D();
        var groupMarker = new THREE.Object3D();

        // 创建地球
        var global = new THREE.Object3D();
        var globalTextureLoader = new THREE.TextureLoader();
        globalTextureLoader.load('earth_atmos_2048.jpg', function(texture){
            var globalGeometry = new THREE.SphereGeometry(200, 200, 200);
            var globalMaterial = new THREE.MeshPhongMaterial({
                color: 0xffffff,
                map: texture
            });
            global = new THREE.Mesh(globalGeometry, globalMaterial);
            group.add(global);
        });

        // 创建marker
        for(var p = 0; p <= placePoint.length-1; p++){
            var lng = placePoint[p][0],
                lat = placePoint[p][1],
                r = 200;

            var markerGeometry = new THREE.SphereGeometry(1, 0, 0),
                markerMaterial = new THREE.MeshPhongMaterial({
                    color: 0xffffff
                });
            var marker = new THREE.Mesh(markerGeometry, markerMaterial);
            var markerPosition = getPosition(lng, lat, r);
            marker.position.set(markerPosition.x, markerPosition.y, markerPosition.z);
            groupMarker.add(marker);
        }


        group.add(groupMarker);
        scene.add(group);
        document.body.appendChild(renderer.domElement);


        $('.point').bind('click', function(){
            OnDocumentClick($(this).index());
        });
        //document.addEventListener("click",OnDocumentClick,false);

        // 渲染
        var render = function(){
            updateMarkerPosition();
            renderer.render(scene, camera);
            requestAnimationFrame(render);
        };
        var renderOnece = function(){
            updateMarkerPosition();
            renderer.render(scene, camera);
        };
        render();

        // 相机控制器
        var control = new THREE.OrbitControls(camera);
        control.addEventListener('change', renderOnece);
    });
</script>
</body>
</html>
